/* ===============================================================================
   TABLE OF CONTENT
   ===============================================================================
   1. General
   2. Make Container
   3. Make Rows
   4. Make Columns
   5. Include Mixin
   6. Make display
   7. Make display flex
   8. Make spacing
*/

/* =============================================================================== 
   1. General
   =============================================================================== */

/* Reset CSS */
*,
*::before,
*::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

/* Variables */
$grid-gutter-width: 30px !default;
$grid-columns: 12 !default;

$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px,
) !default;

/* Set Breakpoints Value */
$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
) !default;

// Spacing

$spacer: 1rem !default;
$spacers: (
    ) !default;
// stylelint-disable-next-line scss/dollar-variable-default
$spacers: map-merge((0: 0,
            1: ($spacer * .25),
            2: ($spacer * .5),
            3: $spacer,
            4: ($spacer * 1.5),
            5: ($spacer * 3)),
        $spacers
);

/* Set display Value */

$headings-margin-bottom: $spacer / 2 !default;
$headings-font-family: null !default;
$headings-font-weight: 500 !default;
$headings-line-height: 1.2 !default;
$headings-color: null !default;

$displays: none, inline, inline-block, block, table, table-row, table-cell, flex, inline-flex !default;

$display1-size: 6rem !default;
$display2-size: 5.5rem !default;
$display3-size: 4.5rem !default;
$display4-size: 3.5rem !default;

$display1-weight: 300 !default;
$display2-weight: 300 !default;
$display3-weight: 300 !default;
$display4-weight: 300 !default;
$display-line-height: $headings-line-height  !default;

/* Function Media Query */
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints)==null, "", "-#{$name}");
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    }
    @else {
        @content;
    }
}

/* =============================================================================== 
   2. Make Container
   =============================================================================== */

@mixin make-container($gutter: $grid-gutter-width) {
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
    margin-right: auto;
    margin-left: auto;
}

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {

    @each $breakpoint,
    $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            max-width: $container-max-width;
        }
    }
}

/* =============================================================================== 
   3. Make Rows
   =============================================================================== */

@mixin make-row($gutter: $grid-gutter-width) {
    display: flex;
    flex-wrap: wrap;
    margin-right: -$gutter / 2;
    margin-left: -$gutter / 2;
}

/* =============================================================================== 
   4. Make Columns
   =============================================================================== */

@mixin make-col-ready($gutter: $grid-gutter-width) {
    position: relative;
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
}

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage($size / $columns);
    max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    $num: $size / $columns;
    margin-left: if($num==0, 0, percentage($num));
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
    %grid-column {
        position: relative;
        width: 100%;
        padding-right: $gutter / 2;
        padding-left: $gutter / 2;
    }

    @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);

        @for $i from 1 through $columns {
            .col#{$infix}-#{$i} {
                @extend %grid-column;
            }
        }

        .col#{$infix},
        .col#{$infix}-auto {
            @extend %grid-column;
        }

        @include media-breakpoint-up($breakpoint, $breakpoints) {
            .col#{$infix} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }

            .col#{$infix}-auto {
                flex: 0 0 auto;
                width: auto;
                max-width: 100%;
            }

            @for $i from 1 through $columns {
                .col#{$infix}-#{$i} {
                    @include make-col($i, $columns);
                }
            }

            .order#{$infix}-first {
                order: -1;
            }

            .order#{$infix}-last {
                order: $columns + 1;
            }

            @for $i from 0 through $columns {
                .order#{$infix}-#{$i} {
                    order: $i;
                }
            }

            @for $i from 0 through ($columns - 1) {
                @if not ($infix==""and $i==0) {

                    .offset#{$infix}-#{$i} {
                        @include make-col-offset($i, $columns);
                    }
                }
            }
        }
    }
}

/* =============================================================================== 
   5. Include Mixin
   =============================================================================== */

/* Make Container */
.container {
    @include make-container();
    @include make-container-max-widths();

}

/* Make Rows */
.row {
    @include make-row;
}

/* Make Columns */
@include make-grid-columns;


/* =============================================================================== 
   6. Make display
   =============================================================================== */

// stylelint-disable declaration-no-important

//
// Utilities for common `display` values
//

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        @each $value in $displays {
            .d#{$infix}-#{$value} {
                display: $value;
            }
        }
    }
}


/* =============================================================================== 
   7. Make display flex
   =============================================================================== */

// stylelint-disable declaration-no-important

// Flex variation
//
// Custom styles for additional flex alignment options.

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        .flex#{$infix}-row {
            flex-direction: row;
        }

        .flex#{$infix}-column {
            flex-direction: column;
        }

        .flex#{$infix}-row-reverse {
            flex-direction: row-reverse;
        }

        .flex#{$infix}-column-reverse {
            flex-direction: column-reverse;
        }

        .flex#{$infix}-wrap {
            flex-wrap: wrap;
        }

        .flex#{$infix}-nowrap {
            flex-wrap: nowrap;
        }

        .flex#{$infix}-wrap-reverse {
            flex-wrap: wrap-reverse;
        }

        .flex#{$infix}-fill {
            flex: 1 1 auto;
        }

        .flex#{$infix}-grow-0 {
            flex-grow: 0;
        }

        .flex#{$infix}-grow-1 {
            flex-grow: 1;
        }

        .flex#{$infix}-shrink-0 {
            flex-shrink: 0;
        }

        .flex#{$infix}-shrink-1 {
            flex-shrink: 1;
        }

        .justify-content#{$infix}-start {
            justify-content: flex-start;
        }

        .justify-content#{$infix}-end {
            justify-content: flex-end;
        }

        .justify-content#{$infix}-center {
            justify-content: center;
        }

        .justify-content#{$infix}-between {
            justify-content: space-between;
        }

        .justify-content#{$infix}-around {
            justify-content: space-around;
        }

        .align-items#{$infix}-start {
            align-items: flex-start;
        }

        .align-items#{$infix}-end {
            align-items: flex-end;
        }

        .align-items#{$infix}-center {
            align-items: center;
        }

        .align-items#{$infix}-baseline {
            align-items: baseline;
        }

        .align-items#{$infix}-stretch {
            align-items: stretch;
        }

        .align-content#{$infix}-start {
            align-content: flex-start;
        }

        .align-content#{$infix}-end {
            align-content: flex-end;
        }

        .align-content#{$infix}-center {
            align-content: center;
        }

        .align-content#{$infix}-between {
            align-content: space-between;
        }

        .align-content#{$infix}-around {
            align-content: space-around;
        }

        .align-content#{$infix}-stretch {
            align-content: stretch;
        }

        .align-self#{$infix}-auto {
            align-self: auto;
        }

        .align-self#{$infix}-start {
            align-self: flex-start;
        }

        .align-self#{$infix}-end {
            align-self: flex-end;
        }

        .align-self#{$infix}-center {
            align-self: center;
        }

        .align-self#{$infix}-baseline {
            align-self: baseline;
        }

        .align-self#{$infix}-stretch {
            align-self: stretch;
        }
    }
}


/* =============================================================================== 
   8. Make spacing
   =============================================================================== */

// stylelint-disable declaration-no-important

// Margin and Padding

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        @each $prop,
        $abbrev in (margin: m, padding: p) {

            @each $size,
            $length in $spacers {
                .#{$abbrev}#{$infix}-#{$size} {
                    #{$prop}: $length;
                }

                .#{$abbrev}t#{$infix}-#{$size},
                .#{$abbrev}y#{$infix}-#{$size} {
                    #{$prop}-top: $length;
                }

                .#{$abbrev}r#{$infix}-#{$size},
                .#{$abbrev}x#{$infix}-#{$size} {
                    #{$prop}-right: $length;
                }

                .#{$abbrev}b#{$infix}-#{$size},
                .#{$abbrev}y#{$infix}-#{$size} {
                    #{$prop}-bottom: $length;
                }

                .#{$abbrev}l#{$infix}-#{$size},
                .#{$abbrev}x#{$infix}-#{$size} {
                    #{$prop}-left: $length;
                }
            }
        }

        // Negative margins (e.g., where `.mb-n1` is negative version of `.mb-1`)
        @each $size,
        $length in $spacers {
            @if $size  !=0 {
                .m#{$infix}-n#{$size} {
                    margin: -$length;
                }

                .mt#{$infix}-n#{$size},
                .my#{$infix}-n#{$size} {
                    margin-top: -$length;
                }

                .mr#{$infix}-n#{$size},
                .mx#{$infix}-n#{$size} {
                    margin-right: -$length;
                }

                .mb#{$infix}-n#{$size},
                .my#{$infix}-n#{$size} {
                    margin-bottom: -$length;
                }

                .ml#{$infix}-n#{$size},
                .mx#{$infix}-n#{$size} {
                    margin-left: -$length;
                }
            }
        }

        // Some special margin utils
        .m#{$infix}-auto {
            margin: auto;
        }

        .mt#{$infix}-auto,
        .my#{$infix}-auto {
            margin-top: auto;
        }

        .mr#{$infix}-auto,
        .mx#{$infix}-auto {
            margin-right: auto;
        }

        .mb#{$infix}-auto,
        .my#{$infix}-auto {
            margin-bottom: auto;
        }

        .ml#{$infix}-auto,
        .mx#{$infix}-auto {
            margin-left: auto;
        }
    }
}